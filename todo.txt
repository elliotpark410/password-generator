JavaScript Password Generator HW:
-review 12/20 class video at 4 hour 28 min mark DONE
-create pseudocode DONE
-understand initial HTML, JavaScript, and CSS code DONE
-code
    -CREATE COMMENTS 
    -CREAT ABILITY TO STOP RUNNING NEXT PROMPTS IF PASSWORD LENGTH PROMPT IS NULL OR BLANK
    -CONFIRM THERE ARE NO ERRORS IN CONSOLE
-create README with screenshots or GIFs
-15 git commits. Find out how many commits 
-review grading criteria
-deploy link through Github
-submit deployed link and github to Bootcamp Spot



Acceptance Criteria:
GIVEN I need a new, secure password
WHEN I click the button to generate a password
THEN I am presented with a series of prompts for password criteria DONE
WHEN prompted for password criteria
THEN I select which criteria to include in the password DONE
WHEN prompted for the length of the password
THEN I choose a length of at least 8 characters and no more than 128 characters DONE
WHEN asked for character types to include in the password
THEN I confirm whether or not to include lowercase, uppercase, numeric, and/or special characters DONE
WHEN I answer each prompt
THEN my input should be validated and at least one character type should be selected DONE
WHEN all prompts are answered
THEN a password is generated that matches the selected criteria DONE
WHEN the password is generated
THEN the password is either displayed in an alert or written to the page DONE



Psuedocode:
0. CreAte variables to store values for passwordLength, lowercaseCharacters, uppercaseCharacters, specialCharacters, and numeric characters
1. prompt user "How many characters would you like your password to contain?" 
2. if user chooses less than 8 characters and greater than 128 characters, then create 2 alert that user password length must be 1. greater than 7 and 2. less than or equal to 128 
3. Store value of passwordLength for generatePassword function
3. if user includes valid number of characters, then add another window prompt saying "Click OK to include special characters" 
4. if user clicks OK to include special characters, then password generator function has to include special characters with an if statement. If user clicks cancel, then password generator function will not include special characters
5. add another window prompt saying "Click OK to include lowercase character
6. if user clicks OK to include lowercase characters, then password generator function has to include lowercase characters with an if statement. If user clicks cancel, then password generator function will not include lowercase characters
7. add another window prompt saying "Click OK to include uppercase character
8. if user clicks OK to include uppercase characters, then password generator function has to include uppercase characters with an if statement. If user clicks cancel, then password generator function will not include uppercase characters
9. if user clicks Cancel on all prompts (except for character length prompt), then create alert saying "Must select at least one character type"
10. Once all prompts have been answered, create generate password function
11. Create object for passwordCharacterKey
12. Create a getPasswordCharacter array
13. Use passwordLength from prompt to generate password length and confirm whether includeLowercase etc has been marked true. if so, include lowercase etc to password generator 
14. Create random password  with math.floor and math.random with passwordCharacterKey.length






